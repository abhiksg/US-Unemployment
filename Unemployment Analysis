# Reading in jobs file
jobs = pd.read_csv(url_jobs)

# Print first five lines of DataFrame
print(jobs.head(5))

# Checking the type of each column in DataFrame
print(jobs.dtypes)

# Converting datestamp column to a datetime object
jobs["datestamp"] = pd.to_datetime(jobs["datestamp"])

# Setting the datestamp columns as the index of DataFrame
jobs = jobs.set_index('datestamp')

# Checking the number of missing values in each column
print(jobs.isnull().sum())

# Generating a boxplot
jobs.boxplot(fontsize=6, vert=False)
plt.show()

# Generating numerical summaries
print(jobs.describe())

# Creating a subset of the jobs DataFrame
jobs_subset = jobs[['Finance', 'Information', 'Manufacturing', 'Construction']]

# Printing the first 5 rows of jobs_subset
print(jobs_subset.head(5))

# Creating a facetted graph with 2 rows and 2 columns
ax = jobs_subset.plot(subplots=True,
                      layout=(2,2),
                      sharex=False,
                      sharey=False,
                      linewidth=0.7,
                      fontsize=3,
                      legend=False)
plt.show()

# Plotting all time series in the jobs DataFrame
ax = jobs.plot(colormap="Spectral", fontsize=6, linewidth=0.8)
ax.set_xlabel('Date', fontsize=10)
ax.set_ylabel('Unemployment Rate', fontsize=10)
ax.set_title('Unemployment rate of U.S. workers by industry', fontsize=10)
ax.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))
# Annotate plots with vertical lines
ax.axvline("2001-07-01", color='blue', linestyle='--', linewidth=0.8)
ax.axvline("2008-09-01", color='blue', linestyle='--', linewidth=0.8)
plt.show()

# Extracting the month from the index of jobs
index_month = jobs.index.month

# Computing the mean unemployment rate for each month
jobs_by_month = jobs.groupby(index_month).mean()

# Plotting the mean unemployment rate for each month
ax = jobs_by_month.plot(fontsize=6, linewidth=1)
ax.set_xlabel('Month', fontsize=10)
ax.set_ylabel('Mean unemployment rate', fontsize=10)
ax.legend(bbox_to_anchor=(0.8, 0.6), fontsize=10)
plt.show()

# Extracting the year in each date indices of the jobs DataFrame
index_year = jobs.index.year

# Computing the mean unemployment rate for each year
jobs_by_year = jobs.groupby(index_year).mean()

# Plotting the mean unemployment rate for each year
ax = jobs_by_year.plot(fontsize=6, linewidth=1)
ax.set_xlabel('Year', fontsize=10)
ax.set_ylabel('Mean unemployment rate', fontsize=10)
ax.legend(bbox_to_anchor=(0.1, 0.5), fontsize=10)
plt.show()

# Initializing dictionary
jobs_decomp={}

# Getting the names of each time series in the DataFrame
jobs_names = jobs.columns

# Running time series decomposition 
    ts_decomposition = sm.tsa.seasonal_decompose(jobs[ts])
    jobs_decomp[ts] = ts_decomposition

# Extracting the seasonal values for the decomposition of each time series
for ts in jobs_names:
    jobs_seasonal[ts] = jobs_decomp[ts].seasonal
    
# Creating a DataFrame from the jobs_seasonal dictionary
seasonality_df = pd.DataFrame.from_dict(jobs_seasonal)

# Creating a faceted plot of the seasonality_df DataFrame
seasonality_df.plot(subplots=True,
                   layout=(4,4),
                   sharey=False,
                   fontsize=2,
                   linewidth=0.3,
                   legend=False)

plt.show()

# Getting correlation matrix of the seasonality_df DataFrame
seasonality_corr = seasonality_df.corr(method="spearman")

# Customizing the clustermap of the seasonality_corr correlation matrix
fig = sns.clustermap(seasonality_corr, annot=True, annot_kws={"size": 4}, linewidths=.4, figsize=(15, 10))
plt.setp(fig.ax_heatmap.yaxis.get_majorticklabels(), rotation=0)
plt.setp(fig.ax_heatmap.xaxis.get_majorticklabels(), rotation=90)
plt.show()
